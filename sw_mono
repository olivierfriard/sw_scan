#!/usr/bin/env python3

"""
Align a query sequence with the smith-waterman algorithm (skbio) with sequences from a multi fasta file or EMBL format (see ENA)
(c) Olivier Friard

version without multiprocessing

"""

__version__ = '6'
__version_date__ = "2021-11-16"

import os
#from multiprocessing import Pool, cpu_count
from skbio.alignment import StripedSmithWaterman
import sys
from Bio import SeqIO
from Bio.Seq import Seq
import argparse
import pathlib as pl
import sqlite3

MIN_ALIGN_LENGTH_DEFAULT = 0.5
MIN_IDENTITY_DEFAULT = 0.5

MATCH_SCORE = 5
MISMATCH_SCORE = -4
GAP_OPEN_PENALTY = 12
GAP_EXTEND_PENALTY = 4

MP_MAX_SEQUENCES_NUMBER = 10000


'''
alignment.aligned_query_sequence      alignment.query_begin                 alignment.target_begin
alignment.aligned_target_sequence     alignment.query_end                   alignment.target_end_optimal
alignment.cigar                       alignment.query_sequence              alignment.target_end_suboptimal
alignment.is_zero_based(              alignment.set_zero_based(             alignment.target_sequence
alignment.optimal_alignment_score     alignment.suboptimal_alignment_score
'''


def output(id, description, alignment):

    # remove id from description
    description = description.replace(id , "").strip()

    return [id, description, alignment['frame'], alignment['identity'], alignment['score'],
            alignment['align_length'], alignment['target_length'],
            alignment['aligned_query_sequence'], alignment['aligned_target_sequence'],
            alignment['query_begin'], alignment['query_end'],
            alignment['target_begin'], alignment['target_end_optimal']
    ]


def align(input: list) -> list:  # target_seq, target_id, target_description):

    target_seq, target_id, target_description = input
    result = []

    frame = "f"

    idx = -1
    found_100 = False
    while True:
        idx = target_seq.find(query_sequence, idx + 1)
        if idx == -1:
            break
        found_100 = True
        alignment_f = {"frame": frame,
                       "score": query_sequence_length * MATCH_SCORE,
                       "identity": "100.00",
                       "align_length": len(query_sequence),
                       "target_length": len(target_seq),
                       "aligned_query_sequence": query_sequence,
                       "aligned_target_sequence": query_sequence,
                       "query_begin": 1,
                       "query_end": len(query_sequence),
                       "target_begin": idx + 1,
                       "target_end_optimal": idx  + len(query_sequence)
                      }
        result.append(output(target_id, target_description, alignment_f))

    if not found_100:
        ssw_alignment = query(target_seq)
        assert len(ssw_alignment.aligned_query_sequence) == len(ssw_alignment.aligned_target_sequence)

        # identity
        matches = 0
        for i, j in zip(ssw_alignment.aligned_query_sequence, ssw_alignment.aligned_target_sequence):
            if i == j:
                matches += 1
        identity = 100 * matches / len(ssw_alignment.aligned_query_sequence)

        alignment_f = {"frame": frame,
                       "score": ssw_alignment['optimal_alignment_score'],
                       "identity": round(identity, 2),
                       "align_length": len(ssw_alignment.aligned_target_sequence),
                       "target_length": len(target_seq),
                       "aligned_query_sequence": ssw_alignment.aligned_query_sequence,
                       "aligned_target_sequence": ssw_alignment.aligned_target_sequence,
                       "query_begin":  ssw_alignment.query_begin,
                       "query_end": ssw_alignment.query_end,
                       "target_begin": ssw_alignment.target_begin,
                       "target_end_optimal": ssw_alignment.target_end_optimal,
                       }
        if MIN_IDENTITY or MIN_ALIGN_LENGTH:
            if alignment_f["identity"] >= MIN_IDENTITY and alignment_f["align_length"] / query_sequence_length >= MIN_ALIGN_LENGTH:
                result.append(output(target_id, target_description, alignment_f))
        else:
            result.append(output(target_id, target_description, alignment_f))


    frame = "r"
    idx = -1
    found_100 = False
    while True:
        idx = target_seq.find(query_sequence_revcomp, idx + 1)
        if idx == -1:
            break
        found_100 = True

        alignment_r = {"frame": frame,
                       "score": query_sequence_length * MATCH_SCORE,
                       "identity": "100.00",
                       "align_length": query_sequence_length,
                       "target_length": len(target_seq),
                       "aligned_query_sequence": query_sequence,
                       "aligned_target_sequence": query_sequence,
                       "query_begin": 1,
                       "query_end": len(query_sequence_revcomp),
                       "target_begin": idx + 1,
                       "target_end_optimal": idx + len(query_sequence_revcomp)
                       }

        result.append(output(target_id, target_description, alignment_r))

    if not found_100:
        ssw_alignment_revcomp = query_revcomp(target_seq)
        # identity
        matches = 0
        for i, j in zip(ssw_alignment_revcomp.aligned_query_sequence, ssw_alignment_revcomp.aligned_target_sequence):
            if i == j:
                matches += 1
        identity = 100 * matches / len(ssw_alignment_revcomp.aligned_query_sequence)

        alignment_r = {"frame": frame,
                       "score": ssw_alignment_revcomp['optimal_alignment_score'],
                       "identity": round(identity, 2),
                       "align_length": len(ssw_alignment_revcomp.aligned_target_sequence),
                       "target_length": len(target_seq),
                       #"aligned_query_sequence": ssw_alignment_revcomp.aligned_query_sequence,
                       "aligned_query_sequence": str(Seq(ssw_alignment_revcomp.aligned_query_sequence).reverse_complement()),
                       #"aligned_target_sequence": ssw_alignment_revcomp.aligned_target_sequence,
                       "aligned_target_sequence": str(Seq(ssw_alignment_revcomp.aligned_target_sequence).reverse_complement()),
                       "query_begin":  ssw_alignment_revcomp.query_begin,
                       "query_end": ssw_alignment_revcomp.query_end,
                       "target_begin": ssw_alignment_revcomp.target_begin,
                       "target_end_optimal": ssw_alignment_revcomp.target_end_optimal,
                      }

        if MIN_IDENTITY or MIN_ALIGN_LENGTH:
            if alignment_r["identity"] >= MIN_IDENTITY and alignment_r["align_length"] / query_sequence_length >= MIN_ALIGN_LENGTH:
               result.append(output(target_id, target_description, alignment_r))
        else:
            result.append(output(target_id, target_description, alignment_r))

    return result


def align_mp(seq_list):

    with Pool(n_cpu) as p:
        results = p.map(align, seq_list)
    return results




def main():

    def align_file(target_file):
        """
        align sequences from file by chunk of MP_MAX_SEQUENCES_NUMBER sequences
        """

        count = 0
        seq_number = 0
        for record in SeqIO.parse(target_file, db_format):
            seq_number += 1
            count += 1
            # seq_list.append((str(record.seq), record.id, record.description))

            result = align((str(record.seq), record.id, record.description))
            print(result)

            cursor.execute("INSERT INTO sequences  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", result)
            connection.commit()

        return seq_number

    connection = sqlite3.connect(output_file)
    connection.row_factory = sqlite3.Row
    cursor = connection.cursor()
    cursor.execute(("create table sequences "
                    "(id text, description text, frame text, identity float, score float, "
                    " align_length int, target_length int, aligned_query_sequence text, aligned_target_sequence text, "
                    "query_begin int, query_end int, target_begin int, target_end_optimal int)"
                   ))
    connection.commit()

    tot_seq_nb = 0
    final_results = []

    # header
    '''
    print(("id\tdescription\tframe\tidentity\tscore\talign_length\ttarget_length\t"
           "aligned_query_sequence\taligned_target_sequence\tquery_begin\tquery_end\t"
           "target_begin\ttarget_end_optimal"), file=output_file)
    '''

    if not list_of_files:
        tot_seq_nb += align_file(target_file)
    else:
        with open(target_file, "r") as f_in:
            for line in f_in:
                target_file2 = line.strip().split(" ")[0]
                if target_file2:
                    tot_seq_nb += align_file(target_file2)

    '''
    # sort by score descending
    final_results.sort(key=lambda x:x[4], reverse=True)

    for result in final_results:
        print("\t".join([str(x) for x in result]), file=output_file)

    output_file.close()
    '''

    print(f"{tot_seq_nb} sequence(s) found in database.", file=sys.stderr)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(prog="SW",
                                     description="Alignment of a sequence against database with the Smith-Waterman algorithm.",
                                     usage=("sw.py -q QUERY_PATH -t TARGET_PATH -c N_CORES -o OUTPUT_PATH"
                                            "\nor:\n"
                                            "cat my_database.dtb | sw -q QUERY_PATH -t - -f DB_FORMAT -c N_CORES -o OUTPUT_PATH"
                                           )
                                    )
    parser.add_argument("-q", "--query", action="store", dest="query", type=str, help="Path of the query file (FASTA format)")
    parser.add_argument("-t", "--target", action='store', dest="target", type=str, help="Path of the target sequences (FASTA format)")
    parser.add_argument("-f", "--db-format", action='store', dest="db_format", type=str, help="Format of the database (embl or fasta), only for stdin")
    parser.add_argument("-c", "--cpu", action="store", dest="cpu", default=16, type=int, help="Set number of CPU/cores to use (default all)")
    parser.add_argument("-o", "--output", action="store", dest="output", type=str, help="Set path for the output file")
    parser.add_argument("-v", "--version", action='version', version=f"%(prog)s v.{__version__} {__version_date__} (c) Olivier Friard 2021", help="Display the help")
    parser.add_argument("--min-align-len", action='store', dest="min_align_len", type=float, help="Minimal length of alignment (0-100%% of query length)")
    parser.add_argument("--min-identity", action='store', dest="min_identity", type=float, help="Minimal identity (0-100%%)")

    MIN_ALIGN_LENGTH: float = 0.5
    MIN_IDENTITY: float = 0.5

    args = parser.parse_args()

    if not args.query:
        print('Query file not specified!', file=sys.stderr)
        sys.exit(1)
    else:
        query_file = args.query
        if not pl.Path(query_file).is_file():
            print('Query file not found!', file=sys.stderr)
            sys.exit(1)

    # database
    if not args.target:
        print('Target file not specified!', file=sys.stderr)
        sys.exit(1)
    else:
        target_file = args.target
        if target_file == '-':  # read on stdin
            target_file = sys.stdin
            if args.db_format:
                db_format = args.db_format.lower()
            if not args.db_format or db_format not in ('embl', 'fasta'):
                print('The database format was not specified! Use FASTA or EMBL formats', file=sys.stderr)
                sys.exit(1)
        else:
            if not pl.Path(target_file).is_file():
                print('Target file not found!', file=sys.stderr)
                sys.exit(1)

            # check DB format
            db_format: str = ""
            list_of_files: bool = False
            with open(target_file, "r") as f:
                content = f.read(4)
                if content.startswith(">"):
                    db_format = 'fasta'
                if content.startswith("ID "):
                    db_format = 'embl'
                if content.startswith("/"):  # file is list of files
                    list_of_files = True

            if not db_format and not list_of_files:
                print('Database format not recognized! Use FASTA or EMBL formats', file=sys.stderr)
                sys.exit(1)

            # check db_format in case of list of file
            if list_of_files:
                db_format = ""
                with open(target_file, "r") as f_in:
                    for line in f_in:
                        with open(line.strip().split(" ")[0]) as f_in2:
                            content = f_in2.read(4)
                            if content.startswith("ID "):
                                db_format = 'embl'
                                break
                            if content.startswith(">"):
                                db_format = 'fasta'
                                break

                if not db_format:
                    print('Database format not recognized! Use FASTA or EMBL formats', file=sys.stderr)
                    sys.exit(1)


    '''
    if not args.cpu:
        n_cpu = cpu_count()
    else:
        n_cpu = int(args.cpu)
    '''

    if args.output:
        if pl.Path(args.output).is_file():
            os.remove(args.output)
        output_file = args.output
    else:
        output_file = sys.stdout

    if args.min_align_len:
        MIN_ALIGN_LENGTH = args.min_align_len / 100
    else:
        MIN_ALIGN_LENGTH = MIN_ALIGN_LENGTH_DEFAULT

    if args.min_identity:
        MIN_IDENTITY = args.min_identity / 100
    else:
        MIN_IDENTITY = MIN_IDENTITY_DEFAULT


    # read the query sequence from argv #1
    for record in SeqIO.parse(query_file, "fasta"):
        query_id = record.id
        query_sequence = str(record.seq)
        query_sequence_length = len(query_sequence)

    query = StripedSmithWaterman(query_sequence,
                                 zero_index=True,
                                 gap_open_penalty=GAP_OPEN_PENALTY,
                                 gap_extend_penalty=GAP_EXTEND_PENALTY,
                                 match_score=MATCH_SCORE,
                                 mismatch_score=MISMATCH_SCORE)

    query_sequence_revcomp = str(Seq(query_sequence).reverse_complement())
    query_revcomp = StripedSmithWaterman(query_sequence_revcomp,
                                         zero_index=True,
                                         gap_open_penalty=GAP_OPEN_PENALTY,
                                         gap_extend_penalty=GAP_EXTEND_PENALTY,
                                         match_score=MATCH_SCORE,
                                         mismatch_score=MISMATCH_SCORE)

    main()

